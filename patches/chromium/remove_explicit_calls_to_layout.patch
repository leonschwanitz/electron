From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Allen Bauer <kylixrd@chromium.org>
Date: Fri, 2 Sep 2022 15:55:42 +0000
Subject: Remove explicit calls to Layout().

Some tests had to be slightly modified by forcing the widget to be the size of the content.

Bug: 1350521
Change-Id: I6a7971a81d8a1cc305ce064416a192f0db2edfe5
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3817986
Reviewed-by: Avi Drissman <avi@chromium.org>
Commit-Queue: Allen Bauer <kylixrd@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1042592}

diff --git a/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.h b/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.h
index 9ffa0c5ccb59c076d10879565d3e38db9c8f8001..5c9d790a7859de25cbd564ab88bb887205efeafc 100644
--- a/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.h
+++ b/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.h
@@ -6,7 +6,7 @@
 #define CHROME_BROWSER_UI_VIEWS_APPS_NATIVE_APP_WINDOW_FRAME_VIEW_MAC_H_
 
 #include "base/memory/raw_ptr.h"
-#include "ui/views/window/native_frame_view.h"
+#include "ui/views/window/native_frame_view_mac.h"
 
 namespace extensions {
 class NativeAppWindow;
@@ -16,7 +16,7 @@ class Widget;
 
 // Provides metrics consistent with a native frame on Mac. The actual frame is
 // drawn by NSWindow.
-class NativeAppWindowFrameViewMac : public views::NativeFrameView {
+class NativeAppWindowFrameViewMac : public views::NativeFrameViewMac {
  public:
   NativeAppWindowFrameViewMac(views::Widget* frame,
                               extensions::NativeAppWindow* window);
@@ -28,8 +28,6 @@ class NativeAppWindowFrameViewMac : public views::NativeFrameView {
   ~NativeAppWindowFrameViewMac() override;
 
   // NonClientFrameView:
-  gfx::Rect GetWindowBoundsForClientBounds(
-      const gfx::Rect& client_bounds) const override;
   int NonClientHitTest(const gfx::Point& point) override;
 
  private:
diff --git a/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.mm b/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.mm
index d0f1be1f6983a6624cf9bfe309b7d6ff130f769b..0f40257d5b61194d80b4bbe138f67adfa7ec301d 100644
--- a/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.mm
+++ b/chrome/browser/ui/views/apps/native_app_window_frame_view_mac.mm
@@ -15,23 +15,9 @@
 NativeAppWindowFrameViewMac::NativeAppWindowFrameViewMac(
     views::Widget* frame,
     extensions::NativeAppWindow* window)
-    : views::NativeFrameView(frame), native_app_window_(window) {
-}
-
-NativeAppWindowFrameViewMac::~NativeAppWindowFrameViewMac() {
-}
+    : views::NativeFrameViewMac(frame), native_app_window_(window) {}
 
-gfx::Rect NativeAppWindowFrameViewMac::GetWindowBoundsForClientBounds(
-    const gfx::Rect& client_bounds) const {
-  NSWindow* ns_window = GetWidget()->GetNativeWindow().GetNativeNSWindow();
-  gfx::Rect window_bounds = gfx::ScreenRectFromNSRect([ns_window
-      frameRectForContentRect:gfx::ScreenRectToNSRect(client_bounds)]);
-  // Enforce minimum size (1, 1) in case that |client_bounds| is passed with
-  // empty size.
-  if (window_bounds.IsEmpty())
-    window_bounds.set_size(gfx::Size(1, 1));
-  return window_bounds;
-}
+NativeAppWindowFrameViewMac::~NativeAppWindowFrameViewMac() = default;
 
 int NativeAppWindowFrameViewMac::NonClientHitTest(const gfx::Point& point) {
   if (!bounds().Contains(point))
diff --git a/ui/views/BUILD.gn b/ui/views/BUILD.gn
index be1323410552de0c1dc0281c33b85d16387f7420..6fdde818844b7345a69f59d7a7416652667fd2d7 100644
--- a/ui/views/BUILD.gn
+++ b/ui/views/BUILD.gn
@@ -609,6 +609,7 @@ component("views") {
       "event_monitor_mac.h",
       "widget/native_widget_mac.h",
       "widget/widget_utils_mac.h",
+      "window/native_frame_view_mac.h",
     ]
     sources += [
       "accessibility/ax_virtual_view_mac.mm",
@@ -637,6 +638,7 @@ component("views") {
       "views_touch_selection_controller_factory_mac.cc",
       "widget/native_widget_mac.mm",
       "widget/widget_utils_mac.mm",
+      "window/native_frame_view_mac.mm",
     ]
     public_deps += [ "//components/remote_cocoa/common:mojo" ]
     deps += [
diff --git a/ui/views/widget/native_widget_mac.mm b/ui/views/widget/native_widget_mac.mm
index 1a13b49bf04e37c8e3f4c5664e453388b3c94b2e..dba4a0e5d0ed9ca97c73cf1e368254e9f85553c2 100644
--- a/ui/views/widget/native_widget_mac.mm
+++ b/ui/views/widget/native_widget_mac.mm
@@ -43,7 +43,7 @@
 #include "ui/views/widget/native_widget_delegate.h"
 #include "ui/views/widget/widget_aura_utils.h"
 #include "ui/views/widget/widget_delegate.h"
-#include "ui/views/window/native_frame_view.h"
+#include "ui/views/window/native_frame_view_mac.h"
 
 using remote_cocoa::mojom::WindowVisibilityState;
 
@@ -267,7 +267,7 @@ void OnDidChangeFocus(View* focused_before, View* focused_now) override {
 
 std::unique_ptr<NonClientFrameView>
 NativeWidgetMac::CreateNonClientFrameView() {
-  return std::make_unique<NativeFrameView>(GetWidget());
+  return std::make_unique<NativeFrameViewMac>(GetWidget());
 }
 
 bool NativeWidgetMac::ShouldUseNativeFrame() const {
diff --git a/ui/views/widget/root_view_unittest.cc b/ui/views/widget/root_view_unittest.cc
index f0186dea710672507110d43471b0caadbdd4edaa..929ef9cfee0a9012021a522344741f5b52afa909 100644
--- a/ui/views/widget/root_view_unittest.cc
+++ b/ui/views/widget/root_view_unittest.cc
@@ -862,7 +862,7 @@ TEST_F(RootViewTest, AnnounceTextTest) {
   const std::u16string kText = u"Text";
   root_view->AnnounceText(kText);
   EXPECT_EQ(2U, root_view->children().size());
-  root_view->Layout();
+  RunScheduledLayout(root_view);
   EXPECT_FALSE(root_view->children()[0]->size().IsEmpty());
   EXPECT_TRUE(root_view->children()[1]->size().IsEmpty());
   View* const hidden_view = root_view->children()[1];
diff --git a/ui/views/widget/widget_unittest.cc b/ui/views/widget/widget_unittest.cc
index 6875e436ff130029eac055788ca8800f47b1d091..52a49f964c99071d1c3ab97dcf18e6b2501f65e5 100644
--- a/ui/views/widget/widget_unittest.cc
+++ b/ui/views/widget/widget_unittest.cc
@@ -1637,7 +1637,8 @@ TEST_F(DesktopWidgetTest, TestViewWidthAfterMinimizingWidget) {
   non_client_view->SetFrameView(
       std::make_unique<MinimumSizeFrameView>(widget.get()));
   // Setting the frame view doesn't do a layout, so force one.
-  non_client_view->Layout();
+  non_client_view->InvalidateLayout();
+  RunScheduledLayout(non_client_view);
   widget->Show();
   EXPECT_NE(0, non_client_view->frame_view()->width());
   widget->Minimize();
diff --git a/ui/views/window/custom_frame_view_unittest.cc b/ui/views/window/custom_frame_view_unittest.cc
index 633b82abae5465b2c94e90fd321b9a8040b47899..1fd6f7a805158aaa4d053a236f9b7540fd56d93c 100644
--- a/ui/views/window/custom_frame_view_unittest.cc
+++ b/ui/views/window/custom_frame_view_unittest.cc
@@ -156,7 +156,9 @@ TEST_F(CustomFrameViewTest, MaximizeRevealsRestoreButton) {
   ASSERT_TRUE(maximize_button()->GetVisible());
 
   widget()->Maximize();
-  custom_frame_view()->Layout();
+  // Just calling Maximize() doesn't invlidate the layout immediately.
+  custom_frame_view()->InvalidateLayout();
+  RunScheduledLayout(custom_frame_view());
 
 #if BUILDFLAG(IS_MAC)
   // Restore buttons do not exist on Mac. The maximize button is instead a kind
@@ -209,7 +211,9 @@ TEST_F(CustomFrameViewTest, LargerEdgeButtonsWhenMaximized) {
   gfx::Rect minimize_button_initial_bounds = minimize_button()->bounds();
 
   widget()->Maximize();
-  custom_frame_view()->Layout();
+  // Just calling Maximize() doesn't invlidate the layout immediately.
+  custom_frame_view()->InvalidateLayout();
+  RunScheduledLayout(custom_frame_view());
 
 #if BUILDFLAG(IS_MAC)
   // On Mac, "Maximize" should not alter the frame. Only fullscreen does that.
diff --git a/ui/views/window/dialog_client_view_unittest.cc b/ui/views/window/dialog_client_view_unittest.cc
index 3b78b837f0abffc6f229031ea0d77b67f47fe3e7..7438dcd661d9e660a0f68e654bda1d43b519e453 100644
--- a/ui/views/window/dialog_client_view_unittest.cc
+++ b/ui/views/window/dialog_client_view_unittest.cc
@@ -66,11 +66,16 @@ class DialogClientViewTest : public test::WidgetTest {
 
  protected:
   gfx::Rect GetUpdatedClientBounds() {
-    client_view()->SizeToPreferredSize();
-    client_view()->Layout();
+    SizeAndLayoutWidget();
     return client_view()->bounds();
   }
 
+  void SizeAndLayoutWidget() {
+    Widget* dialog = widget();
+    dialog->SetSize(dialog->GetContentsView()->GetPreferredSize());
+    RunScheduledLayout(dialog);
+  }
+
   // Makes sure that the content view is sized correctly. Width must be at least
   // the requested amount, but height should always match exactly.
   void CheckContentsIsSetToPreferredSize() {
@@ -181,6 +186,11 @@ class DialogClientViewTest : public test::WidgetTest {
 };
 
 TEST_F(DialogClientViewTest, UpdateButtons) {
+  // Make sure this test runs on all platforms. Mac doesn't allow 0 size
+  // windows. Test only makes sure the size changes based on whether the buttons
+  // exist or not. The initial size should not matter.
+  SetSizeConstraints(gfx::Size(200, 100), gfx::Size(300, 200),
+                     gfx::Size(400, 300));
   // This dialog should start with no buttons.
   EXPECT_EQ(delegate()->GetDialogButtons(), ui::DIALOG_BUTTON_NONE);
   EXPECT_EQ(nullptr, client_view()->ok_button());
@@ -290,10 +300,12 @@ TEST_F(DialogClientViewTest, SetupFocusChain) {
 // Test that the contents view gets its preferred size in the basic dialog
 // configuration.
 TEST_F(DialogClientViewTest, ContentsSize) {
+  // On Mac the size cannot be 0, so we give it a preferred size.
+  SetSizeConstraints(gfx::Size(200, 100), gfx::Size(300, 200),
+                     gfx::Size(400, 300));
   CheckContentsIsSetToPreferredSize();
   EXPECT_EQ(delegate()->GetContentsView()->size(), client_view()->size());
-  // There's nothing in the contents view (i.e. |this|), so it should be 0x0.
-  EXPECT_EQ(gfx::Size(), client_view()->size());
+  EXPECT_EQ(gfx::Size(300, 200), client_view()->size());
 }
 
 // Test the effect of the button strip on layout.
@@ -473,8 +485,7 @@ TEST_F(DialogClientViewTest, ButtonPosition) {
   SetSizeConstraints(gfx::Size(), gfx::Size(contents_width, contents_height),
                      gfx::Size(666, 666));
   SetDialogButtons(ui::DIALOG_BUTTON_OK);
-  client_view()->SizeToPreferredSize();
-  client_view()->Layout();
+  SizeAndLayoutWidget();
   EXPECT_EQ(contents_width - button_row_inset,
             client_view()->ok_button()->bounds().right());
   EXPECT_EQ(contents_height + button_row_inset,
@@ -610,8 +621,7 @@ TEST_F(DialogClientViewTest, ButtonLayoutWithExtra) {
   ASSERT_NE(ok, extra);
   ASSERT_NE(cancel, extra);
 
-  client_view()->SizeToPreferredSize();
-  client_view()->Layout();
+  SizeAndLayoutWidget();
 
   auto bounds_left = [](View* v) { return v->GetBoundsInScreen().x(); };
   auto bounds_right = [](View* v) { return v->GetBoundsInScreen().right(); };
@@ -646,8 +656,7 @@ TEST_F(DialogClientViewTest, ButtonLayoutWithExtra) {
 
   SetSizeConstraints(gfx::Size(), gfx::Size(delegate()->width() + 100, 0),
                      gfx::Size());
-  client_view()->SizeToPreferredSize();
-  client_view()->Layout();
+  SizeAndLayoutWidget();
 
   EXPECT_EQ(old_margin, get_margin());
   EXPECT_EQ(old_flex_margin + 100, get_flex_margin());
diff --git a/ui/views/window/dialog_delegate_unittest.cc b/ui/views/window/dialog_delegate_unittest.cc
index a4ff6c1855d17ba80c0f8aea3ac2eab76452d253..af2935608de2c3f6dd4ccf58a251cba076aa90e6 100644
--- a/ui/views/window/dialog_delegate_unittest.cc
+++ b/ui/views/window/dialog_delegate_unittest.cc
@@ -378,7 +378,7 @@ TEST_F(DialogTest, ActualBoundsMatchPreferredBounds) {
   gfx::Size preferred_size(root_view->GetPreferredSize());
   EXPECT_FALSE(preferred_size.IsEmpty());
   root_view->SizeToPreferredSize();
-  root_view->Layout();
+  RunScheduledLayout(root_view);
   EXPECT_EQ(preferred_size, root_view->size());
 }
 
diff --git a/ui/views/window/native_frame_view_mac.h b/ui/views/window/native_frame_view_mac.h
new file mode 100644
index 0000000000000000000000000000000000000000..98e7aadb740c73e1fdfbfbcd29fd8b76e885e2af
--- /dev/null
+++ b/ui/views/window/native_frame_view_mac.h
@@ -0,0 +1,30 @@
+// Copyright 2022 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef UI_VIEWS_WINDOW_NATIVE_FRAME_VIEW_MAC_H_
+#define UI_VIEWS_WINDOW_NATIVE_FRAME_VIEW_MAC_H_
+
+#include "ui/base/metadata/metadata_header_macros.h"
+#include "ui/views/window/native_frame_view.h"
+
+namespace views {
+
+class Widget;
+
+class VIEWS_EXPORT NativeFrameViewMac : public NativeFrameView {
+ public:
+  METADATA_HEADER(NativeFrameViewMac);
+  explicit NativeFrameViewMac(Widget* frame);
+  NativeFrameViewMac(const NativeFrameViewMac&) = delete;
+  NativeFrameViewMac& operator=(const NativeFrameViewMac&) = delete;
+  ~NativeFrameViewMac() override;
+
+  // NonClientFrameView
+  gfx::Rect GetWindowBoundsForClientBounds(
+      const gfx::Rect& client_bounds) const override;
+};
+
+}  // namespace views
+
+#endif  // UI_VIEWS_WINDOW_NATIVE_FRAME_VIEW_MAC_H_
diff --git a/ui/views/window/native_frame_view_mac.mm b/ui/views/window/native_frame_view_mac.mm
new file mode 100644
index 0000000000000000000000000000000000000000..c392d26a3edc8c69a908b3ad420546509319846d
--- /dev/null
+++ b/ui/views/window/native_frame_view_mac.mm
@@ -0,0 +1,35 @@
+// Copyright 2022 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "ui/views/window/native_frame_view_mac.h"
+
+#import <Cocoa/Cocoa.h>
+
+#include "ui/base/metadata/metadata_impl_macros.h"
+#import "ui/gfx/mac/coordinate_conversion.h"
+#include "ui/views/widget/widget.h"
+
+namespace views {
+
+NativeFrameViewMac::NativeFrameViewMac(Widget* widget)
+    : NativeFrameView(widget) {}
+
+NativeFrameViewMac::~NativeFrameViewMac() = default;
+
+gfx::Rect NativeFrameViewMac::GetWindowBoundsForClientBounds(
+    const gfx::Rect& client_bounds) const {
+  NSWindow* ns_window = GetWidget()->GetNativeWindow().GetNativeNSWindow();
+  gfx::Rect window_bounds = gfx::ScreenRectFromNSRect([ns_window
+      frameRectForContentRect:gfx::ScreenRectToNSRect(client_bounds)]);
+  // Enforce minimum size (1, 1) in case that |client_bounds| is passed with
+  // empty size.
+  if (window_bounds.IsEmpty())
+    window_bounds.set_size(gfx::Size(1, 1));
+  return window_bounds;
+}
+
+BEGIN_METADATA(NativeFrameViewMac, NativeFrameView)
+END_METADATA
+
+}  // namespace views
